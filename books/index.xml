<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Books-rsses on Tobin Harding</title>
    <link>/books/index.xml</link>
    <description>Recent content in Books-rsses on Tobin Harding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Oct 2016 14:17:43 +1100</lastBuildDate>
    <atom:link href="/books/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reading List</title>
      <link>/books/reading-list/</link>
      <pubDate>Sat, 15 Oct 2016 14:17:43 +1100</pubDate>
      
      <guid>/books/reading-list/</guid>
      <description>

&lt;p&gt;Past, current, and future. List is in approximate reverse chronological order.&lt;/p&gt;

&lt;h1 id=&#34;future&#34;&gt;Future&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Flatland: A Romance of Many Dimensions&lt;/strong&gt;
Edwin Abbott Abbott&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Alchemist&lt;/strong&gt;
Paulo Coelho&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Godel, Escher, Bach: an Eternal Golden Braid&lt;/strong&gt;
Douglas R. Hofstadter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peopleware&lt;/strong&gt; Productive Projects and Teams -
Tom DeMarco and Timothy Lister&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Mythical Man-Month&lt;/strong&gt;
Frederick P. Brooks, Jr.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An Introduction to Functional Programming Systems Using Haskell&lt;/strong&gt;
A J T Davie&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mastering Regular Expressions&lt;/strong&gt;
Jeffrey E.F. Friedl&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hackers Delight&lt;/strong&gt;
Henry S. Warren, Jr.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming Pearls&lt;/strong&gt;
Jon Bently&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Algorithm Design Manual&lt;/strong&gt;
Steven S Skiena&lt;/p&gt;

&lt;h1 id=&#34;current&#34;&gt;Current&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;The Go Programming Language&lt;/strong&gt;
Alan A. A. Donovan, Brian W. Kernighan&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction to Algorithms&lt;/strong&gt;
Thomas H. Cormen, Charles C. Leiserson, Ronald L. Rivest, Clifford Stein&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction to Graph Theory&lt;/strong&gt;
Richard J. Trudeau&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linear Algebra and its Applications&lt;/strong&gt;
Gilbert Strang&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discrete and Combinatorial Mathematics&lt;/strong&gt;
Ralph P. Grimaldi&lt;/p&gt;

&lt;h1 id=&#34;past&#34;&gt;Past&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Apprenticeship Patterns&lt;/strong&gt; Guidance for the Aspiring Software Craftsman -
David H. Hoover and Adewale Oshineye &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real World Haskell&lt;/strong&gt;
Bryan O&amp;rsquo;Sullivan, John Goerzen and Don Stewart &lt;em&gt;(s,s)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn You a Haskell For Great Good&lt;/strong&gt;
Miran Lipovaca &lt;em&gt;(m,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structure and Interpretation of Computer Programs&lt;/strong&gt;
Harold Abelson, Gerald Jay Sussman, Julie Sussman &lt;em&gt;(m,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Scheme Programming Language&lt;/strong&gt;
R. Kent Dybvig &lt;em&gt;(m,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Little Schemer&lt;/strong&gt;
Daniel P. Friedman, Matthias Felleisen &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARM Assembly Language&lt;/strong&gt;
William Hohl &lt;em&gt;(a,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Essential Linux Device Drivers&lt;/strong&gt;
Sreekrishnan Venkateswaran &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux Device Drivers&lt;/strong&gt;
Jonathan Corbet, Alessandro Rubini, Greg Kroah-Hartman &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux Kernel Develop&lt;/strong&gt;
Robert Love &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Linux Programming Interface&lt;/strong&gt;
Michael Kerrisk &lt;em&gt;(m,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming the World Wide&lt;/strong&gt;
Rebert W. Sebesta &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Applied Cryptography&lt;/strong&gt;
Bruce Schneier &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python Essential Reference&lt;/strong&gt;
David M. Beazley &lt;em&gt;(m,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clean Code, A Handbook of Agile Software Craftsmanship&lt;/strong&gt;
Robert C. Martin &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python the Hard Way&lt;/strong&gt;
Zed A. Shaw &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX Network Programming&lt;/strong&gt;
W. Richard Stevens, Bill Fenner, Andrew M. Rudoff &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Programming in the UNIX Environment&lt;/strong&gt;
W. Richard Stevens, Stephen A. Rago &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX Systems Programming&lt;/strong&gt;
Kay A. Robbins, Steven Robbins &lt;em&gt;(a,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intermediate Perl&lt;/strong&gt;
Randal L. Schwartz, brian d foy, Tom Phoenix &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning Perl&lt;/strong&gt;
Randal L. Schwartz, brian d foy, Tom Phoenix &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beginning Linux Programming&lt;/strong&gt;
Neil Matthew, Richard Stones &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version Control with Git&lt;/strong&gt;
Jon Loeliger, Matthew McCullough &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Pragmatic Programmer&lt;/strong&gt;
Andrew Hunt, David Thomas &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Art of UNIX Programming&lt;/strong&gt;
Eric S. Raymond &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expert C Programming, Deep C Secrets&lt;/strong&gt;
Peter Van Der Linden &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Practice of Programming&lt;/strong&gt;
Brian W. Kernighan, Rob Pike &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Linux Works&lt;/strong&gt;
Brian Ward &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning GNU Emacs&lt;/strong&gt;
Debra Cameron, James Elliott, Marc Loy, Eric Raymond, Bill Rosenblatt &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Art of Computer Programming (volume 2)&lt;/strong&gt; Seminumerical Algorithms -
Donald E. Knuth &lt;em&gt;(m,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Art of Computer Programming (volume 1)&lt;/strong&gt; Fundamental Algorithms -
Donald E. Knuth &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command Line Kung Foo&lt;/strong&gt;
Jason Cannon &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux Shell Scripting with Bash&lt;/strong&gt;
Ken O. Burtch &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Bash to Z Shell&lt;/strong&gt; Conquering the Command -
Oliver Kiddle, Jerry Peek, Peter Stephenson &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Computer Networks&lt;/strong&gt; A Systems Approach -
Larry L. Peterson, Bruce S. Davie &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Concise Introduction to Pure Mathematics&lt;/strong&gt;
Martin Liebeck &lt;em&gt;(m,m)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Computer Organization and Design&lt;/strong&gt;
David A. Patterson, John L Hennessy &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operating System Concepts&lt;/strong&gt;
Abraham Silberschatz, Peter Baer Galvin, Greg Cagne &lt;em&gt;(a,-)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The C Programming Language&lt;/strong&gt;
Brian W. Kernighan, Dennis Ritchie &lt;em&gt;(a,a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Past reading entries are suffixed with code representing level of
completion. First character representing amount of
text read. Second character representing amount of exercises
completed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;em&gt;(x,x)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;s = some&lt;br /&gt;
m = most&lt;br /&gt;
a = all&lt;br /&gt;
- = not applicable (i.e no exercises in text)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>